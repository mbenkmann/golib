/*
Copyright (c) 2013 Matthias S. Benkmann

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
MA  02110-1301, USA.
*/

// Various re-usable utility functions.
package util


/*
  This is a first attempt at a buffer that is more GC-friendly.
  I wrote this when I still believed the problem with the GC was
  my own memory being misinterpreted as pointers. Therefore this
  implemention takes care to 0 out blocks before freeing them.
  However now I know that the fake pointers are actually in the
  Go runtime, so the 0ing out doesn't help. This buffer implementation
  is not completely useless, though. Because it allocates memory in
  fragments rather than one growing contiguous block it limits the
  damage the the fake pointers can do.
  
  For best effectiveness, this buffer implementation should be
  combined with runtime.MemProfileRate = 0  because the memory profiling
  data itself pins memory blocks.
*/


const fragment_size = 65536

type Buffer struct {
  rest int
  bufs [][]byte
}

func (b *Buffer) String() string {
  if len(b.bufs) == 0 { return "" }
  
  buf := make([]byte, 0, (len(b.bufs)-1)*fragment_size + b.rest )
  for i := 0; i < len(b.bufs)-1; i++ {
    buf = append(buf, b.bufs[i]...)
  }
  if b.rest > 0 { buf = append(buf, b.bufs[len(b.bufs)-1][0:b.rest]...) }
  return string(buf)
}

func (b *Buffer) Clear() {
  if b.rest > 0 {
    for b.rest > 0 {
      b.rest--
      b.bufs[len(b.bufs)-1][b.rest] = 0
    }
    b.bufs[len(b.bufs)-1] = nil
    b.bufs = b.bufs[0:len(b.bufs)-1]
  }
  
  for len(b.bufs) > 0 {
    for i := 0; i < fragment_size; i++ { b.bufs[len(b.bufs)-1][i] = 0 }
    b.bufs[len(b.bufs)-1] = nil
    b.bufs = b.bufs[0:len(b.bufs)-1]
  }
  
  b.bufs = nil
}

func (b *Buffer) Write(p []byte) (n int, err error) {
  n = len(p)
  err = nil
  
  if n > 0 {
    idx := 0
    for len(p[idx:]) > 0 {
    
      if b.rest == 0 {
        nbufs := make([][]byte, len(b.bufs)+1)
        copy(nbufs,b.bufs)
        for i := range b.bufs { b.bufs[i] = nil }
        b.bufs = nbufs
        b.bufs[len(b.bufs)-1] = make([]byte, fragment_size)
      }
      
      copied := copy(b.bufs[len(b.bufs)-1][b.rest:], p[idx:])
      idx += copied
      b.rest += copied
      b.rest = b.rest % fragment_size
    }
  }
  
  return
}
